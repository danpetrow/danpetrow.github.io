<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://danpetrow.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://danpetrow.com/" rel="alternate" type="text/html" /><updated>2022-02-26T21:37:34-05:00</updated><id>https://danpetrow.com/feed.xml</id><title type="html">danpetrow.com</title><entry><title type="html">I Built A Greenhouse</title><link href="https://danpetrow.com/I-Built-A-Greenhouse/" rel="alternate" type="text/html" title="I Built A Greenhouse" /><published>2021-11-06T00:00:00-04:00</published><updated>2021-11-06T00:00:00-04:00</updated><id>https://danpetrow.com/I-Built-A-Greenhouse</id><content type="html" xml:base="https://danpetrow.com/I-Built-A-Greenhouse/">&lt;p&gt;I built a greenhouse with my brother and my dad.&lt;/p&gt;

&lt;p&gt;Farmer’s friend is a good source for materials.&lt;/p&gt;

&lt;p&gt;The whole process took about a day with three people.&lt;/p&gt;

&lt;p&gt;I’m looking forward to seeing how the greenhouse stands up over time and how productive it can be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/greenhouse1.jpg&quot; alt=&quot;greenhouse1.jpg&quot; /&gt;
&lt;img src=&quot;../images/greenhouse3.jpg&quot; alt=&quot;greenhouse3.jpg&quot; /&gt;
&lt;img src=&quot;../images/greenhouse.jpg&quot; alt=&quot;greenhouse.jpg&quot; /&gt;&lt;/p&gt;</content><author><name>dan</name></author><summary type="html">I built a greenhouse with my brother and my dad.</summary></entry><entry><title type="html">Build A Simple Django Application</title><link href="https://danpetrow.com/Build-A-Simple-Django-Application/" rel="alternate" type="text/html" title="Build A Simple Django Application" /><published>2021-05-12T00:00:00-04:00</published><updated>2021-05-12T00:00:00-04:00</updated><id>https://danpetrow.com/Build-A-Simple-Django-Application</id><content type="html" xml:base="https://danpetrow.com/Build-A-Simple-Django-Application/">&lt;p&gt;In this tutorial we will build a simple web app to visualize stock data using Python (Django), Javascript, and the Alpha Vantage API. What we are going to visualize is Simple Moving Average, Daily Close, and Daily Adjusted Close for a given stock.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/alphaDjango.png&quot; alt=&quot;alphaDjango.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;daily-close-vs-daily-adjusted-close&quot;&gt;Daily Close vs. Daily Adjusted Close&lt;/h2&gt;

&lt;p&gt;If you are new to stocks you might be curious, what is the difference between Daily Close and Daily Adjusted Close? Daily Close is the last price that a stock was traded at for a particular day. Daily Adjusted Close is the last price that a stock was traded at for a particular day minus any corporate actions taken that would affect a stock price. That is to say that if a corporation pays dividends, splits their stock, issues rights, spins-off a new independent company ect. it is useful to discount the Daily Close price to account for this hidden value that was given to investors.&lt;/p&gt;

&lt;p&gt;This tutorial is meant for an audience with a basic understanding of coding but it should also be valuable if you have no experience coding.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;index&quot;&gt;Index&lt;/h2&gt;

&lt;p&gt;I’ve broken down our application into four main sections. In the Models section we will be creating a sqllite backend database. While this project could be done without a backend a database is essential to any modern web application. In the Views section we tell our application what to do when it recieves http requests. In the Templates section we create our html, css, and javascript. The Misc section covers settings and other housekeeping items.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#Conventions&quot;&gt;Conventions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Getting&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Models&quot;&gt;Models&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Views&quot;&gt;Views&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Templates&quot;&gt;Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Misc&quot;&gt;Misc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This demonstration was done using Windows but the process will be similar for Mac or Linux.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;conventions&quot;&gt;Conventions&lt;/h2&gt;
&lt;p&gt;A block that starts with a &amp;gt; indicates a command that should be run in your terminal or command prompt. Make sure you’re running the terminal as Administrator.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; pip install Django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Blocks that start with a # followed by a path indicate that we are working with (creating/editing) a file. I use Visual Studio Code but you can use any text editor or IDE of you choosing.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When working with larger files we will start by looking at the end product file without comments, then there will be a heading, then we will break the code down line by line.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alphavantage.co/support/#api-key&quot;&gt;Get an Alpha Vantage API key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Install Python if you don’t already have it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install Django
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; pip install Django&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install Requests
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; pip install requests&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a Windows Environment Variable for your apikey&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; setx alphavantage yourapikeygoeshere
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the Linux command if you aren’t running Windows.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; export alphavantage yourapikeygoeshere
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;

&lt;p&gt;If you want to get right to the satisfying visualization and work you way backwards through the code/tutorial here is how you can do that. If you want to follow the code line by line skip this section.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; C:\Users\dppet\Desktop\ git clone https://github.com/danpetrow/alphaDjango.git

&amp;gt; C:\Users\dppet\Desktop\ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a project directory and the skeleton for your project.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; C:\Users\dppet\Desktop\ django-admin startproject alphaDjango 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at the skeleton startproject created for us:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alphaDjango/
    manage.py
    alphaDjango/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next open up your inner project directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; C:\Users\dppet\Desktop\ cd alphaDjango
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a new app&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; C:\Users\dppet\Desktop\alphaDjango python manage.py startapp stockVisualizer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have another batch of new files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alphaDjango/stockVisualizer/
__init__.py
admin.py
apps.py
migrations/
    __init__.py
models.py
tests.py
views.py
urls.py # This will be made later. I&apos;ve included this so you can see the overall file structure if you need.
forms.py # This will be made later.
templates/ # Created later on.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;models&quot;&gt;Models&lt;/h2&gt;
&lt;p&gt;Define the structure of our database. This is our end product file without comments. Skip to the next heading for the deeper dive.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\models.py\
from django.db import models
from django.urls import reverse

class Stock(models.Model):
    symbol = models.CharField(max_length=12)

def __str__(self):
    return self.symbol

def get_absolute_url(self):
    return reverse(&apos;stock&apos;, args=[str(self.id)])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lets-break-this-down&quot;&gt;Let’s break this down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\models.py\
from django.db import models
from django.urls import reverse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create your models here.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Stock(models.Model):
    symbol = models.CharField(max_length=12)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re familar with SQL what we have done here is created a table called stock which has a column called symbol where we will store some data.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def __str__(self):
    return self.symbol Create a method that returns a string of the data in our symbol column.

def get_absolute_url(self):
    return reverse(&apos;stock&apos;, args=[str(self.id)]) This creates a unique url for us to access each item in our database. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Create a form from your database model.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\forms.py
from django import forms

class StockForm(forms.Form):
	 symbol = forms.CharField(label\=&apos;Stock Ticker&apos;, max\_length\=12)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Instantiate your database&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; C:\Users\dppet\Desktop\alphaDjango python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should notice running this migrate command creates db.sqlite3 file in your base directory (C:\Users\dppet\Desktop\alphaDjango)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;views&quot;&gt;Views&lt;/h2&gt;

&lt;p&gt;Your first view&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\views.py\
from django.shortcuts import render
from django.views.generic import UpdateView, CreateView, RedirectView
from .forms import StockForm
from .models import Stock
import requests
import os

def home(request):
	try:
		stock = Stock.objects.all()
		data= list(Stock.objects.all())
		ticker = data[0]
		ticker = str(ticker).upper()
		apikey=os.getenv(&apos;alphavantage&apos;)
		sma = requests.get(f&apos;https://www.alphavantage.co/query?function=SMA&amp;amp;interval=daily&amp;amp;time_period=10&amp;amp;series_type=close&amp;amp;symbol={str(data[0])}&amp;amp;apikey={apikey}&apos;).json()
		prices = requests.get(f&apos;https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&amp;amp;symbol={str(data[0])}&amp;amp;apikey={apikey}&apos;).json()

	except:
		stock = Stock.objects.all()
		data= list(Stock.objects.all())
		ticker = &apos;&apos;
		apikey=os.getenv(&apos;alphavantage&apos;)
		sma = &apos;&apos;
		prices = &apos;&apos;

	if request.method == &apos;POST&apos;:
		form = StockForm(request.POST)

else:
    form = StockForm()

    return render(request, &apos;home.html&apos;,{
            &apos;stock&apos;:stock,
            &apos;ticker&apos;:ticker,
            &apos;form&apos;:form,
            &apos;sma&apos;:sma,
            &apos;prices&apos;:prices,
			&apos;apikey&apos;:apikey,
    })

class StockView(RedirectView):
	url=&quot;/&quot;

class StockUpdateView(UpdateView):
	model = Stock
	fields = [&apos;symbol&apos;]
	template_name = &apos;stock_edit.html&apos;

class StockCreateView(CreateView):
	model = Stock
	fields = [&apos;symbol&apos;]
	template_name = &apos;stock_edit.html&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lets-break-this-down-1&quot;&gt;Let’s break this down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\views.py\
from django.shortcuts import render
from django.views.generic import UpdateView, CreateView, RedirectView
from .forms import StockForm
from .models import Stock
import requests
import os
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create your views here.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def home(request):
	try:
		stock = Stock.objects.all()
		data= list(Stock.objects.all())
		ticker = data[0]
		ticker = str(ticker).upper()
		apikey=os.getenv(&apos;alphavantage&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use the os module to access our apikey which we have stored as an environmental variable /Views.py allows us to interact with the database. We are using a try statement in case our database is empty .Stock.objects.all() returns all of the entries in our model if they exist.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		sma = requests.get(f&apos;https://www.alphavantage.co/query?function=SMA&amp;amp;interval=daily&amp;amp;time_period=10&amp;amp;series_type=close&amp;amp;symbol={str(data[0])}&amp;amp;apikey={apikey}&apos;).json()
		prices = requests.get(f&apos;https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&amp;amp;symbol={str(data[0])}&amp;amp;apikey={apikey}&apos;).json()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are going to use the requests package to get our data from the Alpha Vantage API.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	except:
		stock = Stock.objects.all()
		data= list(Stock.objects.all())
		ticker = &apos;&apos;
		apikey=os.getenv(&apos;alphavantage&apos;)
		sma = &apos;&apos;
		prices = &apos;&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this is a POST request we need to process the form data. POST is an http method that’s used to add data to the backend.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	if request.method == &apos;POST&apos;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a form instance and populate it with data from the request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		form = StockForm(request.POST)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If a GET (or any other http method) we’ll create a blank form&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;else:
    form = StockForm()

    return render(request, &apos;home.html&apos;,{
            &apos;stock&apos;:stock,
            &apos;ticker&apos;:ticker,
            &apos;form&apos;:form,
            &apos;sma&apos;:sma,
            &apos;prices&apos;:prices,
			&apos;apikey&apos;:apikey,
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This dictionary is known as context in Django. It’s useful to move data from the backend to your UI/frontend.&lt;/p&gt;

&lt;p&gt;This function passes data from the frontend to the backend when a form is submitted. Also this passes data from our backend to our homepage when an http get request is made.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class StockView(RedirectView):
	url=&quot;/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we post data to our database this class redirects us back to our homepage&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class StockUpdateView(UpdateView):
	model = Stock
	fields = [&apos;symbol&apos;]
	template_name = &apos;stock_edit.html&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will use this class to update our database Stock.symbol[0]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class StockCreateView(CreateView):
	model = Stock
	fields = [&apos;symbol&apos;]
	template_name = &apos;stock_edit.html&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When nothing exists this class creates Stock.symbol[0]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Your first URL&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\urls.py
from django.contrib import admin # this isn&apos;t even completly required but nice to have to look at the db *1
from django.urls import path
from . import views

urlpatterns = [
	path(&apos;admin/&apos;, admin.site.urls), # *1
	path(&apos;api/create/&apos;, views.StockCreateView.as_view(), name = &apos;stock_create&apos;),
	path(&apos;api/ticker/&amp;lt;int:pk&amp;gt;&apos;, views.StockView.as_view(), name = &quot;stock&quot;),
	path(&apos;api/ticker/&amp;lt;int:pk&amp;gt;/edit/&apos;, views.StockUpdateView.as_view(), name = &apos;stock_edit&apos;),
	path(&apos;&apos;, views.home, name = &apos;home&apos;)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Creating a new path for our web app is simple. Just use Path(‘your-new-url/, The view we want to render defined in .views.py , [‘optional:name’])&lt;/p&gt;

&lt;p&gt;Your project’s URLs&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#C:\Users\dppet\Desktop\alphaDjango\urls.py
from django.urls import include, path

urlpatterns = [
    path(&apos;&apos;, include(&apos;stockVisualizer.urls&apos;)),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rather than using our base urls we include the urls defined in stockVisualizer.urls.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;templates&quot;&gt;Templates&lt;/h2&gt;

&lt;p&gt;This section is wrapped with this raw tag because my website also uses Jinja and it would otherwise get confused.&lt;/p&gt;

&lt;p&gt;Django uses a a technology called Jinja which allows you to write reusable html components. If you’re familiar with html but see something like {% block content %} or {{ stock }} just know this is Jinja.&lt;/p&gt;

&lt;p&gt;Now let’s make some html.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; C:\Users\dppet\Desktop\alphaDjango\ mkdir templates
&amp;gt; C:\Users\dppet\Desktop\alphaDjango\ cd templates
&amp;gt; C:\Users\dppet\Desktop\alphaDjango\templates\ type nul &amp;gt;&amp;gt; &quot;home.html&quot; # this works will in powershell but might not work in command prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An html base&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\templates\base.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot; style=&quot;height: 100%; overflow:hidden;&quot;&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;!--&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&amp;gt;--&amp;gt;
	&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js@3.2.1/dist/chart.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot; integrity=&quot;sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;title&amp;gt;{% block title %}My amazing site{% endblock %}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body style=&apos;height: 100%;&apos;&amp;gt;
	&amp;lt;nav&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/nav&amp;gt;
	&amp;lt;div id=&quot;content&quot;&amp;gt;      
		{% block content %}{% endblock %}
	&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;breakdown&quot;&gt;Breakdown&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\templates\base.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot; style=&quot;height: 100%; overflow:hidden;&quot;&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;!--&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&amp;gt;--&amp;gt;
	&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js@3.2.1/dist/chart.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot; integrity=&quot;sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These two script tags reference CDNs (Content Delivery Network) which enable us to use chart.js and jQuery in our project without downloading those packages.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;title&amp;gt;{% block title %}AlphaDjango{% endblock %}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body style=&apos;height: 100%;&apos;&amp;gt;
	&amp;lt;nav&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/nav&amp;gt;
	&amp;lt;div id=&quot;content&quot;&amp;gt;      
		{% block content %}{% endblock %}
	&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Base.html is a Jinja component which we will now be able to use in all of our html files so we can cut down on repetition.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Homepage html, css, and Javascript.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\templates\home.html
{% extends &apos;base.html&apos; %}

{% block content %}

{% for symbol in stock  %}
{% empty %}
    &amp;lt;h1&amp;gt;Search&amp;lt;/h1&amp;gt;
    &amp;lt;form action = {% url &apos;stock_create&apos; %} method=&quot;post&quot;&amp;gt;{% csrf_token %}
    {{ form.as_p }}
    &amp;lt;input type=&quot;submit&quot; value=&quot;Update&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
{% endfor  %}

{% for symbol in stock %}
    {% if symbol.pk == 1 %}
    &amp;lt;div style=&apos;height:10%;&apos;&amp;gt;
    &amp;lt;div style=&quot;display:inline-block&quot;&amp;gt;
    &amp;lt;h1&amp;gt;Search&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div style=&quot;display:inline-block&quot;&amp;gt;
    &amp;lt;form action = {% url &apos;stock_edit&apos; symbol.pk %} method=&quot;post&quot; id=&quot;myForm&quot; float=&apos;left&apos;&amp;gt;{% csrf_token %}
    {{ form }}
    &amp;lt;input type=&quot;submit&quot; value=&quot;Update&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    {% endif %}
{% endfor %}
&amp;lt;div style=&quot;height:90%; width:90%;&quot;&amp;gt;
&amp;lt;canvas id=&quot;myChart&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
    //variables
    var ticker = &quot;{{ ticker }}&quot;
    var apikey = &quot;{{ apikey }}&quot;
    //console.log(apikey)
    var endpoint = &apos;https://www.alphavantage.co/query?function=SMA&amp;amp;interval=daily&amp;amp;time_period=10&amp;amp;series_type=close&amp;amp;symbol=&apos;+ticker+&apos;&amp;amp;apikey=&apos;+apikey
    var endpoint1 = &apos;https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&amp;amp;outputsize=full&amp;amp;symbol=&apos;+ticker+&apos;&amp;amp;apikey=&apos;+apikey
    let dates, sma, daily_adjusted_close, daily_close, lo = []
    //document ready function
    
    res1 = $(document).ready(function(){

        //ajax call 1
        $.ajax({
            method: &quot;GET&quot;,
            url: endpoint,
            crossDomain: true,
            success: function(data){
                i=data[&apos;Technical Analysis: SMA&apos;]
                ting = function(){
                    var ii = []
                    dates = []
                    sma = []
                    for (let key in i) {
                        dates.push(String(key))
                        lo.push(i[key])
                        ;}
                    for (let key in lo) {
                    sma.push(Number(lo[key][&apos;SMA&apos;]))
                    ;}

                ;}
            ting()

            },
            error: function(error_data){
            console.log(&quot;error&quot;)}
        });
        // second get
        $.ajax({
            method: &quot;GET&quot;,
            url: endpoint1,
            crossDomain: true,
            success: function(data){
                //make vars
                testing = []
                daily_close = []
                daily_adjusted_close = []
                var i = data[&apos;Time Series (Daily)&apos;]
                // get daily close
                daily_close_parse = function(){
                    for (let key in i) {
                        daily_close.push(Number(i[key][&apos;4. close&apos;]))
                    ;}
                ;}
                daily_close_parse()
                daily_adjusted_close_parse = function(){
                    for (let key in i) {
                        daily_adjusted_close.push(Number(i[key][&apos;5. adjusted close&apos;]))
                    ;}
                }
                daily_adjusted_close_parse()

                //fixing the order of the data
                daily_adjusted_close.reverse().slice(60)
                daily_close.reverse().slice(60)
                dates.reverse().slice(60)
                sma.reverse().slice(60)
                //make a graph
                var ctx = document.getElementById(&apos;myChart&apos;).getContext(&apos;2d&apos;);
                var myChart = new Chart(ctx, {
                type: &apos;line&apos;,
                    data: {
                        labels: dates.slice(-60),
                        datasets: [{
                            label: &apos;Simple Moving Average&apos;,
                            data: sma.slice(-60),
                            backgroundColor: [
                                &apos;rgba(99, 132, 255, 0.2)&apos;,
                            ],
                            borderColor: [
                                &apos;rgba(99, 132, 255, 1)&apos;,
                            ],
                            borderWidth: 1
                        },
                        {
                            label: &apos;Daily Close&apos;,
                            data: daily_close.slice(-60),
                            backgroundColor: [
                                &apos;rgba(255, 99, 132, 0.2)&apos;,
                            ],
                            borderColor: [
                                &apos;rgba(255, 99, 132, 1)&apos;,
                            ],
                            borderWidth: 1
                        },
                        {
                            label: &apos;Daily Adjusted Close&apos;,
                            data: daily_adjusted_close.slice(-60),
                            backgroundColor: [
                                &apos;rgba(99, 255, 132, 0.2)&apos;,
                            ],
                            borderColor: [
                                &apos;rgba(99, 255, 132, 1)&apos;,
                            ],
                            borderWidth: 1
                        },
                    ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                //beginAtZero: false
                            }
                        },
                        plugins: {
                            legend: {
                            position: &apos;top&apos;,
                            },
                            title: {
                            display: true,
                            text: ticker
                            }
                        }
                    }
                });
            },
            error: function(error_data){
            console.log(&quot;error&quot;)}
        });

    });
    &amp;lt;/script&amp;gt;
{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;breakdown-1&quot;&gt;Breakdown&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\templates\home.html
{% extends &apos;base.html&apos; %}

{% block content %}

{% for symbol in stock  %}
{% empty %}
    &amp;lt;h1&amp;gt;Search&amp;lt;/h1&amp;gt;
    &amp;lt;form action = {% url &apos;stock_create&apos; %} method=&quot;post&quot;&amp;gt;{% csrf_token %}
    {{ form.as_p }}
    &amp;lt;input type=&quot;submit&quot; value=&quot;Update&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
{% endfor  %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we use {% empty %} which is a useful Jinja snippet. This snippet is a sort of flow control. You can read this like if there are no symbols in stock do the following.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% for symbol in stock %}
    {% if symbol.pk == 1 %}
    &amp;lt;div style=&apos;height:10%;&apos;&amp;gt;
    &amp;lt;div style=&quot;display:inline-block&quot;&amp;gt;
    &amp;lt;h1&amp;gt;Search&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div style=&quot;display:inline-block&quot;&amp;gt;
    &amp;lt;form action = {% url &apos;stock_edit&apos; symbol.pk %} method=&quot;post&quot; id=&quot;myForm&quot; float=&apos;left&apos;&amp;gt;{% csrf_token %}
    {{ form }}
    &amp;lt;input type=&quot;submit&quot; value=&quot;Update&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    {% endif %}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we do have some data in stock then for the first symbol we want a form that will edit that. You should notice the differences in these two forms. The first form refers to our create-stock url which relates to our CreateView view. This form calls our stock_edit url, which uses our StockUpdateView class.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div style=&quot;height:90%; width:90%;&quot;&amp;gt;
&amp;lt;canvas id=&quot;myChart&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates a canvas that we will edit with ChartJS in the script section.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    //variables
    var ticker = &quot;{{ ticker }}&quot;
    var apikey = &quot;{{ apikey }}&quot;
    var endpoint = &apos;https://www.alphavantage.co/query?function=SMA&amp;amp;interval=daily&amp;amp;time_period=10&amp;amp;series_type=close&amp;amp;symbol=&apos;+ticker+&apos;&amp;amp;apikey=&apos;+apikey
    var endpoint1 = &apos;https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&amp;amp;outputsize=full&amp;amp;symbol=&apos;+ticker+&apos;&amp;amp;apikey=&apos;+apikey
    let dates, sma, daily_adjusted_close, daily_close, lo = []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we use our Context to create a variable which is an extremely useful and intuitive function of the render method from our Home view.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    res1 = $(document).ready(function(){

        //ajax call 1
        $.ajax({
            method: &quot;GET&quot;,
            url: endpoint,
            crossDomain: true,
            success: function(data){
                i=data[&apos;Technical Analysis: SMA&apos;]
                ting = function(){
                    var ii = []
                    dates = []
                    sma = []
                    for (let key in i) {
                        dates.push(String(key))
                        lo.push(i[key])
                        ;}
                    for (let key in lo) {
                    sma.push(Number(lo[key][&apos;SMA&apos;]))
                    ;}

                ;}
            ting()

            },
            error: function(error_data){
            console.log(&quot;error&quot;)}
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we create a jquery document ready function. This prevents our javascript from running until all of our html is loaded. Then we make an AJAX call with Jquery and parse through the returned JSON object to get a list of dates and a list of Simple Moving Averages.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        // second get
        $.ajax({
            method: &quot;GET&quot;,
            url: endpoint1,
            crossDomain: true,
            success: function(data){
                //make vars
                testing = []
                daily_close = []
                daily_adjusted_close = []
                var i = data[&apos;Time Series (Daily)&apos;]
                // get daily close
                daily_close_parse = function(){
                    for (let key in i) {
                        daily_close.push(Number(i[key][&apos;4. close&apos;]))
                    ;}
                ;}
                daily_close_parse()
                daily_adjusted_close_parse = function(){
                    for (let key in i) {
                        daily_adjusted_close.push(Number(i[key][&apos;5. adjusted close&apos;]))
                    ;}
                }
                daily_adjusted_close_parse()

                //fixing the order of the data
                daily_adjusted_close.reverse().slice(60)
                daily_close.reverse().slice(60)
                dates.reverse().slice(60)
                sma.reverse().slice(60)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The data that our AJAX calls return is ordered from present to past. We need to reverse this so our graphs look nice and then we slice the list so we only get two months of data.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                //make a graph
                var ctx = document.getElementById(&apos;myChart&apos;).getContext(&apos;2d&apos;);
                var myChart = new Chart(ctx, {
                type: &apos;line&apos;,
                    data: {
                        labels: dates.slice(-60),
                        datasets: [{
                            label: &apos;Simple Moving Average&apos;,
                            data: sma.slice(-60),
                            backgroundColor: [
                                &apos;rgba(99, 132, 255, 0.2)&apos;,
                            ],
                            borderColor: [
                                &apos;rgba(99, 132, 255, 1)&apos;,
                            ],
                            borderWidth: 1
                        },
                        {
                            label: &apos;Daily Close&apos;,
                            data: daily_close.slice(-60),
                            backgroundColor: [
                                &apos;rgba(255, 99, 132, 0.2)&apos;,
                            ],
                            borderColor: [
                                &apos;rgba(255, 99, 132, 1)&apos;,
                            ],
                            borderWidth: 1
                        },
                        {
                            label: &apos;Daily Adjusted Close&apos;,
                            data: daily_adjusted_close.slice(-60),
                            backgroundColor: [
                                &apos;rgba(99, 255, 132, 0.2)&apos;,
                            ],
                            borderColor: [
                                &apos;rgba(99, 255, 132, 1)&apos;,
                            ],
                            borderWidth: 1
                        },
                    ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                //beginAtZero: false
                            }
                        },
                        plugins: {
                            legend: {
                            position: &apos;top&apos;,
                            },
                            title: {
                            display: true,
                            text: ticker
                            }
                        }
                    }
                });
            },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Making our graph is nested inside of our second AJAX call in a success function. This is a hacky method that seems to work like asynchronous Javascript. All this means is instead of all the Javascript executing at the same time, making the graph happens after we’ve got all of the data from our AJAX requests.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            error: function(error_data){
            console.log(&quot;error&quot;)}
        });

    });
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This Javascript is very naive. It works, but ideally this would be actually be asyncronous Javascript. If you have a better way to accomplish this please make a pull request.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Html for editing our database&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\templates\stock_edit.html
{% extends &apos;base.html&apos; %}

{% block content %}
		&amp;lt;h1&amp;gt;Search&amp;lt;/h1&amp;gt;
		&amp;lt;form action = &quot;&quot; method=&quot;post&quot;&amp;gt;{% csrf_token %}
		{{ form.as_p }}
		&amp;lt;input type=&quot;submit&quot; value=&quot;Update&quot; /&amp;gt;
		&amp;lt;/form&amp;gt;
{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;

&lt;p&gt;Now we need to edit one part of our settings to make the app work.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#C:\Users\dppet\Desktop\alphaDjango\settings.py
import os #add this
...
INSTALLED_APPS = [
...
&apos;stockVisualizer&apos;, #add this
]
...
TEMPLATES = [
	...
    {
    &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)], #add this
    },
	...
] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There will be plenty of other stuff in this file that you will not want to change. Make sure you just add these few changes. If you want to take a look at the whole file check it out via Github.&lt;/p&gt;

&lt;p&gt;Tell Django that our app exists and that it uses our database.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# C:\Users\dppet\Desktop\alphaDjango\stockVisualizer\apps.py
from django.apps import AppConfig

class StockvisualizerConfig(AppConfig):
    default_auto_field = &apos;django.db.models.BigAutoField&apos;
    name = &apos;stockVisualizer&apos; --- Congrats you&apos;ve made a webapp with Python, Javascript, and Alphavantage! Run your application so we can take a look at your work.

&amp;gt; C:\Users\dppet\Desktop\alphaDjango\ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open up &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;&lt;/p&gt;</content><author><name>dan</name></author><summary type="html">In this tutorial we will build a simple web app to visualize stock data using Python (Django), Javascript, and the Alpha Vantage API. What we are going to visualize is Simple Moving Average, Daily Close, and Daily Adjusted Close for a given stock.</summary></entry><entry><title type="html">How to compile a c++ program</title><link href="https://danpetrow.com/How-to-Compile-a-C++-Program/" rel="alternate" type="text/html" title="How to compile a c++ program" /><published>2021-03-28T00:00:00-04:00</published><updated>2021-03-28T00:00:00-04:00</updated><id>https://danpetrow.com/How%20to%20Compile%20a%20C++%20Program</id><content type="html" xml:base="https://danpetrow.com/How-to-Compile-a-C++-Program/">&lt;p&gt;After learning python learning a compiled language like C++ seemed both intimidating and unneeded. However the more I’ve learned about programming the more value I can see in removing as much abstraction as possible and getting closer to machine code. I found a C++ program that I wanted to use but I didn’t find much in the way of documentation for how to compile the code into a usable program for Windows. Here is what I learned about how to compile some C++ code into an exe for Windows.&lt;/p&gt;

&lt;p&gt;First you will want to install the Chocolately package manage if you don’t already have it. Here you can find the documentation for that. https://docs.chocolatey.org/en-us/choco/setup.(Alternatively, I believe you can simply install NodeJS which will install Chocolatey.)&lt;/p&gt;

&lt;p&gt;Next you will want to open up the command line and use Chocolatey to install MinGW-w64. 
$ choco install mingw&lt;/p&gt;

&lt;p&gt;While still in the command line open up the directory with your .cpp file.&lt;/p&gt;

&lt;p&gt;$ cd ‘C:/Users/Dan/Desktop/Code’&lt;/p&gt;

&lt;p&gt;Now enter the following command to compile the source file using g++.&lt;/p&gt;

&lt;p&gt;$ g++ -o &lt;your-exe-name-goes-here&gt; code.cpp&lt;/your-exe-name-goes-here&gt;&lt;/p&gt;

&lt;p&gt;Voila you have compiled an exe from some code written in C++.&lt;/p&gt;</content><author><name>dan</name></author><summary type="html">After learning python learning a compiled language like C++ seemed both intimidating and unneeded. However the more I’ve learned about programming the more value I can see in removing as much abstraction as possible and getting closer to machine code. I found a C++ program that I wanted to use but I didn’t find much in the way of documentation for how to compile the code into a usable program for Windows. Here is what I learned about how to compile some C++ code into an exe for Windows.</summary></entry><entry><title type="html">Is it worth publishing</title><link href="https://danpetrow.com/is-it-worth-publishing/" rel="alternate" type="text/html" title="Is it worth publishing" /><published>2021-02-24T00:00:00-05:00</published><updated>2021-02-24T00:00:00-05:00</updated><id>https://danpetrow.com/is%20it%20worth%20publishing</id><content type="html" xml:base="https://danpetrow.com/is-it-worth-publishing/">&lt;p&gt;I’ve written many things that looking back were low quality or didn’t stand up over time. Therefore I believe it is important to formalize the criteria for which I decide a post is worthy of being published.&lt;/p&gt;

&lt;p&gt;Personally, one category of writing that I feel compelled to produce is expository content.&lt;/p&gt;

&lt;p&gt;An expository blog post should explain a subject and be valuable when revisiting in the future, or be beneficial for someone else who is trying to learn about the topic. I also think that documenting experiments which expand or confirm the collective knowledge is a valuable form of expository content. An experiment should make a measurable claim about a subject that is testable, repeatable, and verifiable.&lt;/p&gt;

&lt;p&gt;For example, I feel good about what I’m currently writing regarding my gardening systems and strategies. This is documentation of my current gardening strategies in 2021 that will be valuable to look back on in the future. Anyone else who hasn’t done much gardening could read this post and benefit from my personal account of trials and errors. This post also asserts that I will start 4500 plants this season which is a verifiable claim about the future so not only does it explain the subject of gardening but it is also an experiment.&lt;/p&gt;

&lt;p&gt;Two other posts that I appreciate are the quarterly review post and the technologies to learn in 2021 post.&lt;/p&gt;

&lt;p&gt;These posts feel lower quality than the gardening post currently but they all contain a bit of a claim that I will do something before a specific date in the future. I think that the quarterly review post and the technologies to learn post could go back into the drafts but be expanded and turned into a first hand account and explaination of something that I did in the future.&lt;/p&gt;

&lt;p&gt;A second form of writing which I am familiar with and enjoy is argumentative writing. I appreciate logical discussion so doing this type of writing is enjoyable for me.&lt;/p&gt;

&lt;p&gt;Without further ado here are the criteria that I should use to evaluate whether or not a post is ready to be published. Answer yes to all questions in at least one sub section or the post is likely not worth putting out into the world.&lt;/p&gt;

&lt;p&gt;1a. Is the post an experiment? 1b. If so what are the assertions, the repeatable methodologies to test the assertion and the results?&lt;/p&gt;

&lt;p&gt;2a. Is the post a how to/guide/review written after a first hand experience? 2b. If yes, is it immediately clear what the reader should be able to achieve after reading and is the largest question of why someone would want to do the thing discussed?&lt;/p&gt;

&lt;p&gt;3a. Is this an argumentative piece of writing? 3b. If so what is the overall claim 3c. Does the article have supporting sources? Are counter points addressed? 3d. Is there an audience for this writing? 3e. If the audience is convinced is there some action step they could reasonably take?&lt;/p&gt;

&lt;p&gt;I predict that in 2022 this guide will still hold up.&lt;/p&gt;</content><author><name>dan</name></author><summary type="html">I’ve written many things that looking back were low quality or didn’t stand up over time. Therefore I believe it is important to formalize the criteria for which I decide a post is worthy of being published.</summary></entry><entry><title type="html">How To Clean Ruby Install</title><link href="https://danpetrow.com/How-to-Clean-Ruby-Install/" rel="alternate" type="text/html" title="How To Clean Ruby Install" /><published>2021-02-17T00:00:00-05:00</published><updated>2021-02-17T00:00:00-05:00</updated><id>https://danpetrow.com/How-to-Clean-Ruby-Install</id><content type="html" xml:base="https://danpetrow.com/How-to-Clean-Ruby-Install/">&lt;p&gt;Yesterday I sent about four hours trying to figure out why Jekyll wouldn’t run. Here is what I learned for next time.&lt;/p&gt;

&lt;p&gt;Ruby -v
You can uninstall the whole Ruby language but files are left behind really.
bundle update
You can delete your gemfile and gemfile.lock if you accidentally run this and get in a bad state.
gem uninstall -a
This will uninstall all of the gems currently installed.&lt;/p&gt;

&lt;p&gt;Once you are free from your previous errors and are running fresh you can jump to here.&lt;/p&gt;

&lt;p&gt;bundle init 
Creates a new gemfile in the working directory.
bundle add jekyll
Creates your gemfile.lock with most of your dependencies(the gems you need to install)
bundle install
install the gems you need
group :jekyll_plugins do
  gem ‘jekyll-sitemap’
  gem ‘jekyll-feed’
  gem ‘jekyll-seo-tag’
end
Add you plugins to gemfile
gem “webrick”
Add webrick to your gemfile&lt;/p&gt;

&lt;p&gt;You should be good to go after this.&lt;/p&gt;

&lt;p&gt;Don’t mess with bundle update if things are working maybe?&lt;/p&gt;</content><author><name>dan</name></author><summary type="html">Yesterday I sent about four hours trying to figure out why Jekyll wouldn’t run. Here is what I learned for next time.</summary></entry><entry><title type="html">Git Commands Worth Remembering</title><link href="https://danpetrow.com/Git-Commands-Worth-Remembering/" rel="alternate" type="text/html" title="Git Commands Worth Remembering" /><published>2021-01-19T00:00:00-05:00</published><updated>2021-01-19T00:00:00-05:00</updated><id>https://danpetrow.com/Git-Commands-Worth-Remembering</id><content type="html" xml:base="https://danpetrow.com/Git-Commands-Worth-Remembering/">&lt;p&gt;Today I used Git again. I made quite a few mistakes already with git that caused my remote branches and my local branches to be in a bad state. Luckily, I created remote and local staging branches and managed to keep in tact.&lt;/p&gt;

&lt;p&gt;What I learned tonight is the importance of deleting local branches when you are done with them because they cause problems if you leave them and don’t know exactly what you are doing. Here are some commands to remember.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git checkout -b &quot;branch&quot; - This creates a new local branch.&lt;/li&gt;
&lt;li&gt;git push origin &quot;branch&quot; - This creates a new remote branch.&lt;/li&gt;
&lt;li&gt;git pull origin &quot;branch&quot; - This will take remote &quot;branch&quot; and make your local working branch look like remote &quot;branch&quot;&lt;/li&gt;
&lt;li&gt;git push origin --delete &quot;branch&quot; - This will delete a remote branch.&lt;/li&gt;
&lt;li&gt;git branch -D &quot;branch&quot; - This will delete a local branch.&lt;/li&gt;
&lt;li&gt;git branch - This lists our local branches and highlights our current branch.&lt;/li&gt;
&lt;li&gt;git branch -a - This lists all of our branches&lt;/li&gt;
&lt;li&gt;git branch status - This lists what branch we are on as well as any changes to commit.&lt;/li&gt;
&lt;li&gt;git reset --hard - discard local changes and restore yourself back to the last commit.
&amp;lt;/ul&amp;gt;

Also keep a staging branch both locally and remotely that you only touch when you are sure that your commits won&apos;t break anything.
&lt;/li&gt;&lt;/ul&gt;</content><author><name>dan</name></author><summary type="html">Today I used Git again. I made quite a few mistakes already with git that caused my remote branches and my local branches to be in a bad state. Luckily, I created remote and local staging branches and managed to keep in tact.</summary></entry></feed>